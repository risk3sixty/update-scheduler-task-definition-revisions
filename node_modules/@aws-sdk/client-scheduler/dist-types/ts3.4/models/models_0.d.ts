import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { SchedulerServiceException as __BaseException } from "./SchedulerServiceException";
export declare const ActionAfterCompletion: {
  readonly DELETE: "DELETE";
  readonly NONE: "NONE";
};
export type ActionAfterCompletion =
  (typeof ActionAfterCompletion)[keyof typeof ActionAfterCompletion];
export declare const AssignPublicIp: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AssignPublicIp =
  (typeof AssignPublicIp)[keyof typeof AssignPublicIp];
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export interface ListTagsForResourceInput {
  ResourceArn: string | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface ListTagsForResourceOutput {
  Tags?: Tag[];
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const FlexibleTimeWindowMode: {
  readonly FLEXIBLE: "FLEXIBLE";
  readonly OFF: "OFF";
};
export type FlexibleTimeWindowMode =
  (typeof FlexibleTimeWindowMode)[keyof typeof FlexibleTimeWindowMode];
export interface FlexibleTimeWindow {
  Mode: FlexibleTimeWindowMode | undefined;
  MaximumWindowInMinutes?: number;
}
export declare const ScheduleState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ScheduleState = (typeof ScheduleState)[keyof typeof ScheduleState];
export interface DeadLetterConfig {
  Arn?: string;
}
export interface CapacityProviderStrategyItem {
  capacityProvider: string | undefined;
  weight?: number;
  base?: number;
}
export declare const LaunchType: {
  readonly EC2: "EC2";
  readonly EXTERNAL: "EXTERNAL";
  readonly FARGATE: "FARGATE";
};
export type LaunchType = (typeof LaunchType)[keyof typeof LaunchType];
export interface AwsVpcConfiguration {
  Subnets: string[] | undefined;
  SecurityGroups?: string[];
  AssignPublicIp?: AssignPublicIp;
}
export interface NetworkConfiguration {
  awsvpcConfiguration?: AwsVpcConfiguration;
}
export declare const PlacementConstraintType: {
  readonly DISTINCT_INSTANCE: "distinctInstance";
  readonly MEMBER_OF: "memberOf";
};
export type PlacementConstraintType =
  (typeof PlacementConstraintType)[keyof typeof PlacementConstraintType];
export interface PlacementConstraint {
  type?: PlacementConstraintType;
  expression?: string;
}
export declare const PlacementStrategyType: {
  readonly BINPACK: "binpack";
  readonly RANDOM: "random";
  readonly SPREAD: "spread";
};
export type PlacementStrategyType =
  (typeof PlacementStrategyType)[keyof typeof PlacementStrategyType];
export interface PlacementStrategy {
  type?: PlacementStrategyType;
  field?: string;
}
export declare const PropagateTags: {
  readonly TASK_DEFINITION: "TASK_DEFINITION";
};
export type PropagateTags = (typeof PropagateTags)[keyof typeof PropagateTags];
export interface EcsParameters {
  TaskDefinitionArn: string | undefined;
  TaskCount?: number;
  LaunchType?: LaunchType;
  NetworkConfiguration?: NetworkConfiguration;
  PlatformVersion?: string;
  Group?: string;
  CapacityProviderStrategy?: CapacityProviderStrategyItem[];
  EnableECSManagedTags?: boolean;
  EnableExecuteCommand?: boolean;
  PlacementConstraints?: PlacementConstraint[];
  PlacementStrategy?: PlacementStrategy[];
  PropagateTags?: PropagateTags;
  ReferenceId?: string;
  Tags?: Record<string, string>[];
}
export interface EventBridgeParameters {
  DetailType: string | undefined;
  Source: string | undefined;
}
export interface KinesisParameters {
  PartitionKey: string | undefined;
}
export interface RetryPolicy {
  MaximumEventAgeInSeconds?: number;
  MaximumRetryAttempts?: number;
}
export interface SageMakerPipelineParameter {
  Name: string | undefined;
  Value: string | undefined;
}
export interface SageMakerPipelineParameters {
  PipelineParameterList?: SageMakerPipelineParameter[];
}
export interface SqsParameters {
  MessageGroupId?: string;
}
export interface Target {
  Arn: string | undefined;
  RoleArn: string | undefined;
  DeadLetterConfig?: DeadLetterConfig;
  RetryPolicy?: RetryPolicy;
  Input?: string;
  EcsParameters?: EcsParameters;
  EventBridgeParameters?: EventBridgeParameters;
  KinesisParameters?: KinesisParameters;
  SageMakerPipelineParameters?: SageMakerPipelineParameters;
  SqsParameters?: SqsParameters;
}
export interface CreateScheduleInput {
  Name: string | undefined;
  GroupName?: string;
  ScheduleExpression: string | undefined;
  StartDate?: Date;
  EndDate?: Date;
  Description?: string;
  ScheduleExpressionTimezone?: string;
  State?: ScheduleState;
  KmsKeyArn?: string;
  Target: Target | undefined;
  FlexibleTimeWindow: FlexibleTimeWindow | undefined;
  ClientToken?: string;
  ActionAfterCompletion?: ActionAfterCompletion;
}
export interface CreateScheduleOutput {
  ScheduleArn: string | undefined;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface DeleteScheduleInput {
  Name: string | undefined;
  GroupName?: string;
  ClientToken?: string;
}
export interface DeleteScheduleOutput {}
export interface GetScheduleInput {
  Name: string | undefined;
  GroupName?: string;
}
export interface GetScheduleOutput {
  Arn?: string;
  GroupName?: string;
  Name?: string;
  ScheduleExpression?: string;
  StartDate?: Date;
  EndDate?: Date;
  Description?: string;
  ScheduleExpressionTimezone?: string;
  State?: ScheduleState;
  CreationDate?: Date;
  LastModificationDate?: Date;
  KmsKeyArn?: string;
  Target?: Target;
  FlexibleTimeWindow?: FlexibleTimeWindow;
  ActionAfterCompletion?: ActionAfterCompletion;
}
export interface ListSchedulesInput {
  GroupName?: string;
  NamePrefix?: string;
  State?: ScheduleState;
  NextToken?: string;
  MaxResults?: number;
}
export interface TargetSummary {
  Arn: string | undefined;
}
export interface ScheduleSummary {
  Arn?: string;
  Name?: string;
  GroupName?: string;
  State?: ScheduleState;
  CreationDate?: Date;
  LastModificationDate?: Date;
  Target?: TargetSummary;
}
export interface ListSchedulesOutput {
  NextToken?: string;
  Schedules: ScheduleSummary[] | undefined;
}
export interface UpdateScheduleInput {
  Name: string | undefined;
  GroupName?: string;
  ScheduleExpression: string | undefined;
  StartDate?: Date;
  EndDate?: Date;
  Description?: string;
  ScheduleExpressionTimezone?: string;
  State?: ScheduleState;
  KmsKeyArn?: string;
  Target: Target | undefined;
  FlexibleTimeWindow: FlexibleTimeWindow | undefined;
  ClientToken?: string;
  ActionAfterCompletion?: ActionAfterCompletion;
}
export interface UpdateScheduleOutput {
  ScheduleArn: string | undefined;
}
export interface CreateScheduleGroupInput {
  Name: string | undefined;
  Tags?: Tag[];
  ClientToken?: string;
}
export interface CreateScheduleGroupOutput {
  ScheduleGroupArn: string | undefined;
}
export interface DeleteScheduleGroupInput {
  Name: string | undefined;
  ClientToken?: string;
}
export interface DeleteScheduleGroupOutput {}
export interface GetScheduleGroupInput {
  Name: string | undefined;
}
export declare const ScheduleGroupState: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETING: "DELETING";
};
export type ScheduleGroupState =
  (typeof ScheduleGroupState)[keyof typeof ScheduleGroupState];
export interface GetScheduleGroupOutput {
  Arn?: string;
  Name?: string;
  State?: ScheduleGroupState;
  CreationDate?: Date;
  LastModificationDate?: Date;
}
export interface ListScheduleGroupsInput {
  NamePrefix?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ScheduleGroupSummary {
  Arn?: string;
  Name?: string;
  State?: ScheduleGroupState;
  CreationDate?: Date;
  LastModificationDate?: Date;
}
export interface ListScheduleGroupsOutput {
  NextToken?: string;
  ScheduleGroups: ScheduleGroupSummary[] | undefined;
}
export interface TagResourceInput {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceOutput {}
export interface UntagResourceInput {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceOutput {}
